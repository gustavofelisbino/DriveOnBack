generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "linux-musl-openssl-3.0.x"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model usuario {
  id                 Int            @id @default(autoincrement())
  email              String         @unique
  senha              String
  tipo               tipo_usuario
  status             status_usuario @default(ativo)
  created_at         DateTime       @default(now())
  updated_at         DateTime       @updatedAt
  nome               String?
  oficina_id         Int
  cliente            cliente?
  funcionario        funcionario?
  oficina_gerenciada oficina?       @relation("GestorOficina")
  oficina            oficina        @relation("OficinaUsuarios", fields: [oficina_id], references: [id])
}

model cliente {
  id              Int             @id @default(autoincrement())
  nome            String
  email           String?         @unique
  status          String          @default("ativo")
  telefone        String?
  data_nascimento DateTime?
  observacao      String?
  usuario_id      Int?            @unique
  oficina_id      Int?
  criado_em       DateTime        @default(now())
  atualizado_em   DateTime        @updatedAt
  oficina         oficina?        @relation(fields: [oficina_id], references: [id])
  usuario         usuario?        @relation(fields: [usuario_id], references: [id])
  ordens          ordem_servico[]
  veiculos        veiculo[]
}

model oficina {
  id                Int             @id @default(autoincrement())
  gestor_usuario_id Int?            @unique
  nome              String          @unique
  logradouro        String
  numero            String
  complemento       String?
  cep               String
  cidade_id         Int
  telefone          String?
  email             String?         @unique
  created_at        DateTime        @default(now())
  updated_at        DateTime        @updatedAt
  clientes          cliente[]
  compras           compra_peca[]
  estoque_itens     estoque[]
  fornecedores      fornecedor[]
  funcionarios      funcionario[]
  cidade            cidade          @relation(fields: [cidade_id], references: [id])
  gestor            usuario?        @relation("GestorOficina", fields: [gestor_usuario_id], references: [id])
  ordens_servico    ordem_servico[]
  pecas             peca[]
  servicos          servico[]
  usuarios          usuario[]       @relation("OficinaUsuarios")
}

model funcionario {
  id                Int               @id @default(autoincrement())
  usuario_id        Int               @unique
  oficina_id        Int
  nome              String
  telefone          String?
  email             String?
  data_nascimento   DateTime?
  estado_civil      String?
  genero            String?
  nacionalidade     String?
  logradouro        String?
  numero            String?
  complemento       String?
  cep               String?
  cidade            String?
  estado            String?
  cargo             cargo_funcionario
  departamento      String?
  data_contratacao  DateTime
  tipo_contratacao  String?
  salario           Decimal?
  gestor            String?
  cpf               String?           @unique
  rg                String?
  cnh               String?
  validade_cnh      DateTime?
  ativo             Boolean           @default(true)
  exige_troca_senha Boolean           @default(false)
  avatar_url        String?
  created_at        DateTime          @default(now())
  updated_at        DateTime          @updatedAt
  oficina           oficina           @relation(fields: [oficina_id], references: [id])
  usuario           usuario           @relation(fields: [usuario_id], references: [id])
  ordens_servico    ordem_servico[]
}

model veiculo {
  id         Int             @id @default(autoincrement())
  cliente_id Int
  marca      String
  modelo     String
  ano        Int?
  placa      String          @unique
  cor        String?
  created_at DateTime        @default(now())
  updated_at DateTime        @updatedAt
  ordens     ordem_servico[]
  cliente    cliente         @relation(fields: [cliente_id], references: [id])
}

model ordem_servico {
  id              Int                  @id @default(autoincrement())
  oficina_id      Int
  veiculo_id      Int
  cliente_id      Int
  funcionario_id  Int
  data_abertura   DateTime             @default(now())
  data_fechamento DateTime?
  status          status_os            @default(aberta)
  observacoes     String?
  valor_total     Decimal              @default(0.00)
  created_at      DateTime             @default(now())
  updated_at      DateTime             @updatedAt
  itens           item_ordem_servico[]
  cliente         cliente              @relation(fields: [cliente_id], references: [id])
  funcionario     funcionario          @relation(fields: [funcionario_id], references: [id])
  oficina         oficina              @relation(fields: [oficina_id], references: [id])
  veiculo         veiculo              @relation(fields: [veiculo_id], references: [id])
}

model item_ordem_servico {
  id               Int           @id @default(autoincrement())
  ordem_servico_id Int
  tipo_item        tipo_item_os
  servico_id       Int?
  peca_id          Int?
  quantidade       Int           @default(1)
  preco_unitario   Decimal
  subtotal         Decimal
  created_at       DateTime      @default(now())
  updated_at       DateTime      @updatedAt
  ordem_servico    ordem_servico @relation(fields: [ordem_servico_id], references: [id])
  peca             peca?         @relation(fields: [peca_id], references: [id])
  servico          servico?      @relation(fields: [servico_id], references: [id])
}

model fornecedor {
  id          Int           @id @default(autoincrement())
  oficina_id  Int
  nome        String        @unique
  contato     String?
  telefone    String?
  email       String?       @unique
  logradouro  String?
  numero      String?
  complemento String?
  cep         String?
  cidade_id   Int?
  created_at  DateTime      @default(now())
  updated_at  DateTime      @updatedAt
  compras     compra_peca[]
  cidade      cidade?       @relation(fields: [cidade_id], references: [id])
  oficina     oficina       @relation(fields: [oficina_id], references: [id])
}

model estoque {
  id          Int      @id @default(autoincrement())
  oficina_id  Int
  nome        String
  descricao   String
  preco_custo Decimal
  preco_venda Decimal
  created_at  DateTime @default(now())
  updated_at  DateTime @updatedAt
  estoque_qtd Int
  oficina     oficina  @relation(fields: [oficina_id], references: [id])
}

model cidade {
  id           Int          @id @default(autoincrement())
  nome         String
  uf           String       @db.Char(2)
  created_at   DateTime     @default(now())
  updated_at   DateTime     @updatedAt
  fornecedores fornecedor[]
  oficinas     oficina[]
}

model servico {
  id         Int                  @id @default(autoincrement())
  oficina_id Int
  nome       String
  descricao  String?
  preco      Decimal
  created_at DateTime             @default(now())
  updated_at DateTime             @updatedAt
  itens      item_ordem_servico[]
  oficina    oficina              @relation(fields: [oficina_id], references: [id])
}

model peca {
  id          Int                  @id @default(autoincrement())
  oficina_id  Int
  nome        String
  descricao   String?
  preco_custo Decimal
  preco_venda Decimal
  estoque     Int                  @default(0)
  created_at  DateTime             @default(now())
  updated_at  DateTime             @updatedAt
  compras     compra_peca[]
  itens       item_ordem_servico[]
  oficina     oficina              @relation(fields: [oficina_id], references: [id])
}

model compra_peca {
  id                    Int        @id @default(autoincrement())
  oficina_id            Int
  fornecedor_id         Int
  peca_id               Int
  quantidade            Int
  preco_compra_unitario Decimal
  data_compra           DateTime   @default(now())
  created_at            DateTime   @default(now())
  updated_at            DateTime   @updatedAt
  fornecedor            fornecedor @relation(fields: [fornecedor_id], references: [id])
  oficina               oficina    @relation(fields: [oficina_id], references: [id])
  peca                  peca       @relation(fields: [peca_id], references: [id])
}

enum cargo_funcionario {
  mecanico
  atendente
  gerente
  administrador
}

enum status_os {
  aberta
  em_andamento
  concluida
  cancelada
}

enum tipo_item_os {
  servico
  peca
}

enum tipo_usuario {
  funcionario
  cliente
  gestoroficina
  sistema
}

enum status_usuario {
  ativo
  inativo
  bloqueado
}
